#ifndef _BNO055_REGISTER_H_
#define _BNO055_REGISTER_H_

// use data enum to map register address BNO055
enum REG_ADDRESS_BNO055 {
  BNO055_ADD_SLAVE_L = 0x28,
  BNO055_ADD_SLAVE_H,
  BNO055_ADD_HID_I2C = 0x40
};

// use data enum to map register config page 0 BNO055
enum REG_MAP_PAGE_0 {
  BNO055_CHIP_ID,
  BNO055_ACC_ID,
  BNO055_MAG_ID,
  BNO055_GYR_ID,
  BNO055_SW_REV_ID_LSB,
  BNO055_SW_REV_ID_MSB,
  BNO055_BL_REV_ID,
  BNO055_PAGE_ID,
  BNO055_ACC_DATA_X_LSB,
  BNO055_ACC_DATA_X_MSB,
  BNO055_ACC_DATA_Y_LSB,
  BNO055_ACC_DATA_Y_MSB,
  BNO055_ACC_DATA_Z_LSB,
  BNO055_ACC_DATA_Z_MSB,
  BNO055_MAG_DATA_X_LSB,
  BNO055_MAG_DATA_X_MSB,
  BNO055_MAG_DATA_Y_LSB,
  BNO055_MAG_DATA_Y_MSB,
  BNO055_MAG_DATA_Z_LSB,
  BNO055_MAG_DATA_Z_MSB,
  BNO055_GYR_DATA_X_LSB,
  BNO055_GYR_DATA_X_MSB,
  BNO055_GYR_DATA_Y_LSB,
  BNO055_GYR_DATA_Y_MSB,
  BNO055_GYR_DATA_Z_LSB,
  BNO055_GYR_DATA_Z_MSB,
  BNO055_EUL_DATA_Z_LSB,
  BNO055_EUL_DATA_Z_MSB,
  BNO055_EUL_DATA_X_LSB,
  BNO055_EUL_DATA_X_MSB,
  BNO055_EUL_DATA_Y_LSB,
  BNO055_EUL_DATA_Y_MSB,
  BNO055_QUA_DATA_W_LSB,
  BNO055_QUA_DATA_W_MSB,
  BNO055_QUA_DATA_X_LSB,
  BNO055_QUA_DATA_X_MSB,
  BNO055_QUA_DATA_Y_LSB,
  BNO055_QUA_DATA_Y_MSB,
  BNO055_QUA_DATA_Z_LSB,
  BNO055_QUA_DATA_Z_MSB,
  BNO055_LIA_DATA_X_LSB,
  BNO055_LIA_DATA_X_MSB,
  BNO055_LIA_DATA_Y_LSB,
  BNO055_LIA_DATA_Y_MSB,
  BNO055_LIA_DATA_Z_LSB,
  BNO055_LIA_DATA_Z_MSB,
  BNO055_GRV_DATA_X_LSB,
  BNO055_GRV_DATA_X_MSB,
  BNO055_GRV_DATA_Y_LSB,
  BNO055_GRV_DATA_Y_MSB,
  BNO055_GRV_DATA_Z_LSB,
  BNO055_GRV_DATA_Z_MSB,
  BNO055_DATA_TEMP,
  BNO055_CALIB_STAT,
  BNO055_ST_RESULT,
  BNO055_INT_STA,
  BNO055_SYS_CLK_STATUS,
  BNO055_SYS_STATUS,
  BNO055_SYS_ERR,
  BNO055_UNIT_SEL,
  BNO055_OPR_MODE = 0x3D,
  BNO055_PWR_MODE,
  BNO055_SYS_TRIGGER,
  BNO055_TEMP_SOURCE,
  BNO055_AXIS_MAP_CFG,
  BNO055_AXIS_MAP_SIGN,
  BNO055_ACC_OFFSET_X_LSB = 0x55,
  BNO055_ACC_OFFSET_X_MSB,
  BNO055_ACC_OFFSET_Y_LSB,
  BNO055_ACC_OFFSET_Y_MSB,
  BNO055_ACC_OFFSET_Z_LSB,
  BNO055_ACC_OFFSET_Z_MSB,
  BNO055_MAG_OFFSET_X_LSB,
  BNO055_MAG_OFFSET_X_MSB,
  BNO055_MAG_OFFSET_Y_LSB,
  BNO055_MAG_OFFSET_Y_MSB,
  BNO055_MAG_OFFSET_Z_LSB,
  BNO055_MAG_OFFSET_Z_MSB,
  BNO055_GYR_OFFSET_X_LSB,
  BNO055_GYR_OFFSET_X_MSB,
  BNO055_GYR_OFFSET_Y_LSB,
  BNO055_GYR_OFFSET_Y_MSB,
  BNO055_GYR_OFFSET_Z_LSB,
  BNO055_GYR_OFFSET_Z_MSB,
  BNO055_ACC_RADIUS_LSB,
  BNO055_ACC_RADIUS_MSB,
  BNO055_MAG_RADIUS_LSB,
  BNO055_MAG_RADIUS_MSB,
};

// use data enum to map register config page 1 BNO055
enum REG_MAP_PAGE_1 {
  BNO055_PAGE_ID1 = 0x07,
  BNO055_ACC_CONFIG,
  BNO055_MAG_CONFIG,
  BNO055_GYR_CONFIG_0,
  BNO055_GYR_CONFIG_1,
  BNO055_ACC_SLEEP_CFG,
  BNO055_GYR_SLEEP_CFG,
  BNO055_INT_MSK = 0x0F,
  BNO055_INT_EN,
  BNO055_ACC_AM_THRES,
  BNO055_ACC_INT_SET,
  BNO055_ACC_HG_DURATION,
  BNO055_ACC_HG_THRES,
  BNO055_ACC_NM_THRES,
  BNO055_ACC_NM_SET,
  BNO055_GYR_INT_SET,
  BNO055_GYR_HR_X_SET,
  BNO055_GYR_DUR_X,
  BNO055_GYR_HR_Y_SET,
  BNO055_GYR_DUR_Y,
  BNO055_GYR_HR_Z_SET,
  BNO055_GYR_DUR_Z,
  BNO055_GYR_AM_THRES,
  BNO055_GYR_AM_SET,
  BNO055_UNIQUE_ID = 0x5F
};

// use data enum to map register config operation mode BNO055
enum REG_OPR_MODE {
  OPR_CFG_MODE,
  OPR_ACC_MODE,
  OPR_MAG_MODE,
  OPR_GYR_MODE,
  OPR_ACCMAG_MODE,
  OPR_ACCGYR_MODE,
  OPR_MAGGYR_MODE,
  OPR_AMG_MODE,
  OPR_IMU_MODE,
  OPR_CMP_MODE,
  OPR_M4G_MODE,
  OPR_NDOF_OFF_MODE,
  OPR_NDOF_MODE
};

// use data enum to map register config calibration status BNO055
enum REG_CALIB_STAT_SENSOR {
  BNO055_CALIB_STAT_MAG,
  BNO055_CALIB_STAT_ACC = 0x02,
  BNO055_CALIB_STAT_GYR = 0x04,
  BNO055_CALIB_STAT_ALL = 0x06
};

// use data enum to map register config status data BNO055
enum REG_ST_RESULT {
  BNO055_ST_ACC,
  BNO055_ST_GYR,
  BNO055_ST_MAG,
  BNO055_ST_MCU 
};

enum REG_INT_STA {
  BNO055_GYR_AM      = 0x02,
  BNO055_GYR_H_RATE,
  BNO055_ACC_H_G     = 0x05,
  BNO055_ACC_AM,
  BNO055_ACC_NM,
};

enum REG_UNIT_SEL {
  BNO055_ACC_UNIT,
  BNO055_GYR_UNIT,
  BNO055_EUL_UNIT,
  BNO055_TEMP_UNIT = 0x04,
  BNO055_SYS_UNIT  = 0x07
};

enum REG_ACC_UNIT {
  ACC_UNIT_MPS2,
  ACC_UNIT_MG
};

enum REG_GYR_UNIT {
  GYR_UNIT_DPS,
  GYR_UNIT_RPS
};

enum REG_EUL_UNIT {
  ACC_UNIT_DEG,
  ACC_UNIT_RAD
};

enum REG_TEMP_UNIT {
  TEMP_UNIT_C,
  TEMP_UNIT_F
};

enum REG_SYS_UNIT {
  SYS_UNIT_WINDOWS,
  SYS_UNIT_ANDROID
};

enum REG_PWR_MODE {
  BNO055_NORMAL_MODE,
  BNO055_LOW_PWR_MODE,
  BNO055_SUSPEND_MODE
};

enum REG_ACC_CFG {
  BNO055_ACC_RANGE,
  BNO055_ACC_BW       = 0x02,
  BNO055_ACC_PWR_MODE = 0x05
};

enum REG_ACC_RANGE {
  BNO055_ACC_RANGE_2G,
  BNO055_ACC_RANGE_4G,
  BNO055_ACC_RANGE_8G,
  BNO055_ACC_RANGE_16G
};

enum REG_ACC_BW {
  BNO055_ACC_BW_7F81Hz,
  BNO055_ACC_BW_15F63Hz,
  BNO055_ACC_BW_31F25Hz,
  BNO055_ACC_BW_62F5Hz,
  BNO055_ACC_BW_125Hz,
  BNO055_ACC_BW_250Hz,
  BNO055_ACC_BW_500Hz,
  BNO055_ACC_BW_1000Hz
};

enum REG_ACC_PWR_MODE {
  BNO055_ACC_PWR_NORMAL,
  BNO055_ACC_PWR_SPND,
  BNO055_ACC_PWR_LPWR1,
  BNO055_ACC_PWR_STBY,
  BNO055_ACC_PWR_LPWR2,
  BNO055_ACC_PWR_DSPND,
};

enum REG_MAG_CFG {
  BNO055_CFG_RATE_MODE,
  BNO055_CFG_OPR_MODE = 0x03,
  BNO055_CFG_PWR_MODE = 0x05
};

enum REG_MAG_OUT_RATE {
  BNO055_MAG_RATE_2Hz,
  BNO055_MAG_RATE_6Hz,
  BNO055_MAG_RATE_8Hz,
  BNO055_MAG_RATE_10Hz,
  BNO055_MAG_RATE_15Hz,
  BNO055_MAG_RATE_20Hz,
  BNO055_MAG_RATE_25Hz,
  BNO055_MAG_RATE_30Hz
};

enum REG_MAG_OPR_MODE {
  BNO055_MAG_OPR_LPWR,
  BNO055_MAG_OPR_RGR,
  BNO055_MAG_OPR_ENCH,
  BNO055_MAG_OPR_HACY
};

enum REG_MAG_PWR_MODE {
  BNO055_MAG_PWR_NORMAL,
  BNO055_MAG_PWR_SLEEP,
  BNO055_MAG_PWR_SPND,
  BNO055_MAG_PWR_FORCE
};

enum REG_GYR_CFG_0 {
  BNO055_GYR_RANGE,
  BNO055_GYR_BW = 0x03
};

enum REG_GYR_CFG_1 {
  BNO055_GYR_PWR_MODE
};

enum REG_GYR_RANGE {
  BNO055_GYR_RANGE_2000dps,
  BNO055_GYR_RANGE_1000dps,
  BNO055_GYR_RANGE_500dps,
  BNO055_GYR_RANGE_250dps,
  BNO055_GYR_RANGE_125dps
};

enum REG_GYR_BW {
  BNO055_GYR_BW_523Hz,
  BNO055_GYR_BW_230Hz,
  BNO055_GYR_BW_116Hz,
  BNO055_GYR_BW_47Hz,
  BNO055_GYR_BW_23Hz,
  BNO055_GYR_BW_12Hz,
  BNO055_GYR_BW_64Hz,
  BNO055_GYR_BW_32Hz
};

enum REG_GYR_PWR_MODE {
  BNO055_GYR_PWR_NORMAL,
  BNO055_GYR_PWR_FPWR,
  BNO055_GYR_PWR_DSPND,
  BNO055_GYR_PWR_SPND,
  BNO055_GYR_PWR_APWR
};

enum REG_SYS_TRIGGER {
  BNO055_SEL_TEST,
  BNO055_RST_SYS = 0x05,
  BNO055_RST_INT,
  BNO055_CLK_SEL
};

// check datasheet page 25
enum REG_AXIS_REMAP_CONFIG {
  REMAP_CFG_P0,
  REMAP_CFG_P1,
  REMAP_CFG_P2,
  REMAP_CFG_P3,
  REMAP_CFG_P4,
  REMAP_CFG_P5,
  REMAP_CFG_P6,
  REMAP_CFG_P7
};

#endif /*_BNO050_REGISTER_H_*/